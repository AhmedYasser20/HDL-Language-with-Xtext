/*
 * generated by Xtext 2.29.0
 */
package org.xtext.example.hdl.validation;

import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.hdl.hDL.HDLPackage;
import org.xtext.example.hdl.hDL.PTArchDecl;
import org.xtext.example.hdl.hDL.PTSignalAssign;
import org.xtext.example.hdl.hDL.PTSignalDecl;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class HDLValidator extends AbstractHDLValidator {
	
	@Check
	public void checkDuplicateDeclarations(PTArchDecl ad) {
		// Get first duplicate declaration by signal name
		for(int i = 0; i < ad.getSignalDecls().size(); i++) {
			PTSignalDecl currDecl = ad.getSignalDecls().get(i);
			if(currDecl == null) continue;
			for(int j = i+1; j < ad.getSignalDecls().size(); j++) {
				PTSignalDecl currDecl2 = ad.getSignalDecls().get(j);
				if(currDecl2 == null) continue;
				// check if declaration is duplicate
				if(currDecl.getName().equalsIgnoreCase(currDecl2.getName())) {
					//error
					error("Signal was declared before in line " + 
					       NodeModelUtils.getNode(currDecl).getStartLine(),
					       currDecl2, // error object
					       null);
				}
			}
		}
	}
	
	@Check
	public void checkSignalAssignTypes(PTSignalAssign sa) {
		// Get LHS and RHS strings
		PTSignalDecl lhs = sa.getLhs().getId();
		PTSignalDecl rhs = sa.getRhs().getId();
		
		// Get the surrounding architecture
		PTArchDecl ad = (PTArchDecl) sa.eContainer();
		if(ad == null) return;
		
		// Get LHS and RHS types
		String lhsType = "";
		String rhsType = "";
		for(PTSignalDecl currDecl : ad.getSignalDecls()) {
			if(currDecl == null) continue;
			if(currDecl.getName().equalsIgnoreCase(lhs.getName())) {
				lhsType = currDecl.getSignalType();
			}
			if(currDecl.getName().equalsIgnoreCase(rhs.getName())) {
				rhsType = currDecl.getSignalType();
			}
			
			if(!lhsType.isEmpty() && !rhsType.isEmpty()) {
				break;
			}
		}
		
		// skip if rhs or lhs in undefined
		// this should produce linking error
		if(lhsType.isEmpty() || rhsType.isEmpty()) {
			return;
		}
		
		//Get a suggested signal name with same type as LHS
		String suggestion = "";
		for(PTSignalDecl currDecl : ad.getSignalDecls()) {
			if(currDecl == null) return;
			if(!currDecl.getName().equalsIgnoreCase(rhs.getName()) && 
			   !currDecl.getName().equalsIgnoreCase(lhs.getName()) &&
			   lhsType.equalsIgnoreCase(currDecl.getSignalType())) {
				suggestion = currDecl.getName();
			}
		}
		
		// Compare LHS and RHS types
		if(!lhsType.equalsIgnoreCase(rhsType)) {
			// error
//			error("Type Mismatch!", null);
			error("Type Mismatch!", 
					HDLPackage.eINSTANCE.getPTSignalAssign_Rhs(),
					"ISSUE_CODE_TYPE_MISMATCH",
					suggestion
					);
		}
	}
}
