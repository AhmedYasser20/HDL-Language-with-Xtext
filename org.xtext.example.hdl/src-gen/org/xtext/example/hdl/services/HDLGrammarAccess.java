/*
 * generated by Xtext 2.35.0
 */
package org.xtext.example.hdl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HDLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hdl.HDL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityDeclEntity_declParserRuleCall_0_0 = (RuleCall)cEntityDeclAssignment_0.eContents().get(0);
		private final Assignment cArchDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArchDeclArch_declParserRuleCall_1_0 = (RuleCall)cArchDeclAssignment_1.eContents().get(0);
		
		//Model:
		//    entityDecl=entity_decl archDecl=arch_decl
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entityDecl=entity_decl archDecl=arch_decl
		public Group getGroup() { return cGroup; }
		
		//entityDecl=entity_decl
		public Assignment getEntityDeclAssignment_0() { return cEntityDeclAssignment_0; }
		
		//entity_decl
		public RuleCall getEntityDeclEntity_declParserRuleCall_0_0() { return cEntityDeclEntity_declParserRuleCall_0_0; }
		
		//archDecl=arch_decl
		public Assignment getArchDeclAssignment_1() { return cArchDeclAssignment_1; }
		
		//arch_decl
		public RuleCall getArchDeclArch_declParserRuleCall_1_0() { return cArchDeclArch_declParserRuleCall_1_0; }
	}
	public class Entity_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hdl.HDL.entity_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//entity_decl returns PTEntityDecl:
		//    'entity' name=ID 'is' 'end' ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID 'is' 'end' ';'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class Arch_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hdl.HDL.arch_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchitectureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntityIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEntityIdPTEntityDeclCrossReference_3_0 = (CrossReference)cEntityIdAssignment_3.eContents().get(0);
		private final RuleCall cEntityIdPTEntityDeclIDTerminalRuleCall_3_0_1 = (RuleCall)cEntityIdPTEntityDeclCrossReference_3_0.eContents().get(1);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSignalDeclsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSignalDeclsSignal_declParserRuleCall_5_0 = (RuleCall)cSignalDeclsAssignment_5.eContents().get(0);
		private final Keyword cBeginKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSignalAssignAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSignalAssignSignal_assignParserRuleCall_7_0 = (RuleCall)cSignalAssignAssignment_7.eContents().get(0);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//arch_decl returns PTArchDecl:
		//    'architecture' ID 'of' entityId=[PTEntityDecl] 'is'
		//    signalDecls+=signal_decl* 'begin' signalAssign+=signal_assign* 'end' ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'architecture' ID 'of' entityId=[PTEntityDecl] 'is'
		//signalDecls+=signal_decl* 'begin' signalAssign+=signal_assign* 'end' ';'
		public Group getGroup() { return cGroup; }
		
		//'architecture'
		public Keyword getArchitectureKeyword_0() { return cArchitectureKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//entityId=[PTEntityDecl]
		public Assignment getEntityIdAssignment_3() { return cEntityIdAssignment_3; }
		
		//[PTEntityDecl]
		public CrossReference getEntityIdPTEntityDeclCrossReference_3_0() { return cEntityIdPTEntityDeclCrossReference_3_0; }
		
		//ID
		public RuleCall getEntityIdPTEntityDeclIDTerminalRuleCall_3_0_1() { return cEntityIdPTEntityDeclIDTerminalRuleCall_3_0_1; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//signalDecls+=signal_decl*
		public Assignment getSignalDeclsAssignment_5() { return cSignalDeclsAssignment_5; }
		
		//signal_decl
		public RuleCall getSignalDeclsSignal_declParserRuleCall_5_0() { return cSignalDeclsSignal_declParserRuleCall_5_0; }
		
		//'begin'
		public Keyword getBeginKeyword_6() { return cBeginKeyword_6; }
		
		//signalAssign+=signal_assign*
		public Assignment getSignalAssignAssignment_7() { return cSignalAssignAssignment_7; }
		
		//signal_assign
		public RuleCall getSignalAssignSignal_assignParserRuleCall_7_0() { return cSignalAssignSignal_assignParserRuleCall_7_0; }
		
		//'end'
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class Signal_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hdl.HDL.signal_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSIGNALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSignalTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignalTypeIDTerminalRuleCall_3_0 = (RuleCall)cSignalTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//signal_decl returns PTSignalDecl:
		//    'SIGNAL' name=ID ":" signalType=ID ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'SIGNAL' name=ID ":" signalType=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'SIGNAL'
		public Keyword getSIGNALKeyword_0() { return cSIGNALKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//signalType=ID
		public Assignment getSignalTypeAssignment_3() { return cSignalTypeAssignment_3; }
		
		//ID
		public RuleCall getSignalTypeIDTerminalRuleCall_3_0() { return cSignalTypeIDTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class Signal_assignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hdl.HDL.signal_assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsLhsParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsRhsParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//signal_assign returns PTSignalAssign:
		//    lhs=lhs '<=' rhs=rhs ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=lhs '<=' rhs=rhs ';'
		public Group getGroup() { return cGroup; }
		
		//lhs=lhs
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//lhs
		public RuleCall getLhsLhsParserRuleCall_0_0() { return cLhsLhsParserRuleCall_0_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//rhs=rhs
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//rhs
		public RuleCall getRhsRhsParserRuleCall_2_0() { return cRhsRhsParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LhsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hdl.HDL.lhs");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cIdPTSignalDeclCrossReference_0 = (CrossReference)cIdAssignment.eContents().get(0);
		private final RuleCall cIdPTSignalDeclIDTerminalRuleCall_0_1 = (RuleCall)cIdPTSignalDeclCrossReference_0.eContents().get(1);
		
		//lhs returns PTIdentifier:
		//    id=[PTSignalDecl]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=[PTSignalDecl]
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//[PTSignalDecl]
		public CrossReference getIdPTSignalDeclCrossReference_0() { return cIdPTSignalDeclCrossReference_0; }
		
		//ID
		public RuleCall getIdPTSignalDeclIDTerminalRuleCall_0_1() { return cIdPTSignalDeclIDTerminalRuleCall_0_1; }
	}
	public class RhsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.hdl.HDL.rhs");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cIdPTSignalDeclCrossReference_0 = (CrossReference)cIdAssignment.eContents().get(0);
		private final RuleCall cIdPTSignalDeclIDTerminalRuleCall_0_1 = (RuleCall)cIdPTSignalDeclCrossReference_0.eContents().get(1);
		
		//rhs returns PTIdentifier:
		//    id=[PTSignalDecl]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=[PTSignalDecl]
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//[PTSignalDecl]
		public CrossReference getIdPTSignalDeclCrossReference_0() { return cIdPTSignalDeclCrossReference_0; }
		
		//ID
		public RuleCall getIdPTSignalDeclIDTerminalRuleCall_0_1() { return cIdPTSignalDeclIDTerminalRuleCall_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final Entity_declElements pEntity_decl;
	private final Arch_declElements pArch_decl;
	private final Signal_declElements pSignal_decl;
	private final Signal_assignElements pSignal_assign;
	private final LhsElements pLhs;
	private final RhsElements pRhs;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEntity_decl = new Entity_declElements();
		this.pArch_decl = new Arch_declElements();
		this.pSignal_decl = new Signal_declElements();
		this.pSignal_assign = new Signal_assignElements();
		this.pLhs = new LhsElements();
		this.pRhs = new RhsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.hdl.HDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    entityDecl=entity_decl archDecl=arch_decl
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//entity_decl returns PTEntityDecl:
	//    'entity' name=ID 'is' 'end' ';'
	//;
	public Entity_declElements getEntity_declAccess() {
		return pEntity_decl;
	}
	
	public ParserRule getEntity_declRule() {
		return getEntity_declAccess().getRule();
	}
	
	//arch_decl returns PTArchDecl:
	//    'architecture' ID 'of' entityId=[PTEntityDecl] 'is'
	//    signalDecls+=signal_decl* 'begin' signalAssign+=signal_assign* 'end' ';'
	//;
	public Arch_declElements getArch_declAccess() {
		return pArch_decl;
	}
	
	public ParserRule getArch_declRule() {
		return getArch_declAccess().getRule();
	}
	
	//signal_decl returns PTSignalDecl:
	//    'SIGNAL' name=ID ":" signalType=ID ';'
	//;
	public Signal_declElements getSignal_declAccess() {
		return pSignal_decl;
	}
	
	public ParserRule getSignal_declRule() {
		return getSignal_declAccess().getRule();
	}
	
	//signal_assign returns PTSignalAssign:
	//    lhs=lhs '<=' rhs=rhs ';'
	//;
	public Signal_assignElements getSignal_assignAccess() {
		return pSignal_assign;
	}
	
	public ParserRule getSignal_assignRule() {
		return getSignal_assignAccess().getRule();
	}
	
	//lhs returns PTIdentifier:
	//    id=[PTSignalDecl]
	//;
	public LhsElements getLhsAccess() {
		return pLhs;
	}
	
	public ParserRule getLhsRule() {
		return getLhsAccess().getRule();
	}
	
	//rhs returns PTIdentifier:
	//    id=[PTSignalDecl]
	//;
	public RhsElements getRhsAccess() {
		return pRhs;
	}
	
	public ParserRule getRhsRule() {
		return getRhsAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
