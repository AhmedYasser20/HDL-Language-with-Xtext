/**
 * generated by Xtext 2.35.0
 */
package org.xtext.example.hdl.hDL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.hdl.hDL.HDLPackage;
import org.xtext.example.hdl.hDL.PTArchDecl;
import org.xtext.example.hdl.hDL.PTEntityDecl;
import org.xtext.example.hdl.hDL.PTSignalAssign;
import org.xtext.example.hdl.hDL.PTSignalDecl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>PT Arch Decl</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.hdl.hDL.impl.PTArchDeclImpl#getEntityId <em>Entity Id</em>}</li>
 *   <li>{@link org.xtext.example.hdl.hDL.impl.PTArchDeclImpl#getSignalDecls <em>Signal Decls</em>}</li>
 *   <li>{@link org.xtext.example.hdl.hDL.impl.PTArchDeclImpl#getSignalAssign <em>Signal Assign</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PTArchDeclImpl extends MinimalEObjectImpl.Container implements PTArchDecl
{
  /**
   * The cached value of the '{@link #getEntityId() <em>Entity Id</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntityId()
   * @generated
   * @ordered
   */
  protected PTEntityDecl entityId;

  /**
   * The cached value of the '{@link #getSignalDecls() <em>Signal Decls</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignalDecls()
   * @generated
   * @ordered
   */
  protected EList<PTSignalDecl> signalDecls;

  /**
   * The cached value of the '{@link #getSignalAssign() <em>Signal Assign</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignalAssign()
   * @generated
   * @ordered
   */
  protected EList<PTSignalAssign> signalAssign;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PTArchDeclImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HDLPackage.Literals.PT_ARCH_DECL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PTEntityDecl getEntityId()
  {
    if (entityId != null && entityId.eIsProxy())
    {
      InternalEObject oldEntityId = (InternalEObject)entityId;
      entityId = (PTEntityDecl)eResolveProxy(oldEntityId);
      if (entityId != oldEntityId)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, HDLPackage.PT_ARCH_DECL__ENTITY_ID, oldEntityId, entityId));
      }
    }
    return entityId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PTEntityDecl basicGetEntityId()
  {
    return entityId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEntityId(PTEntityDecl newEntityId)
  {
    PTEntityDecl oldEntityId = entityId;
    entityId = newEntityId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HDLPackage.PT_ARCH_DECL__ENTITY_ID, oldEntityId, entityId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PTSignalDecl> getSignalDecls()
  {
    if (signalDecls == null)
    {
      signalDecls = new EObjectContainmentEList<PTSignalDecl>(PTSignalDecl.class, this, HDLPackage.PT_ARCH_DECL__SIGNAL_DECLS);
    }
    return signalDecls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PTSignalAssign> getSignalAssign()
  {
    if (signalAssign == null)
    {
      signalAssign = new EObjectContainmentEList<PTSignalAssign>(PTSignalAssign.class, this, HDLPackage.PT_ARCH_DECL__SIGNAL_ASSIGN);
    }
    return signalAssign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HDLPackage.PT_ARCH_DECL__SIGNAL_DECLS:
        return ((InternalEList<?>)getSignalDecls()).basicRemove(otherEnd, msgs);
      case HDLPackage.PT_ARCH_DECL__SIGNAL_ASSIGN:
        return ((InternalEList<?>)getSignalAssign()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HDLPackage.PT_ARCH_DECL__ENTITY_ID:
        if (resolve) return getEntityId();
        return basicGetEntityId();
      case HDLPackage.PT_ARCH_DECL__SIGNAL_DECLS:
        return getSignalDecls();
      case HDLPackage.PT_ARCH_DECL__SIGNAL_ASSIGN:
        return getSignalAssign();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HDLPackage.PT_ARCH_DECL__ENTITY_ID:
        setEntityId((PTEntityDecl)newValue);
        return;
      case HDLPackage.PT_ARCH_DECL__SIGNAL_DECLS:
        getSignalDecls().clear();
        getSignalDecls().addAll((Collection<? extends PTSignalDecl>)newValue);
        return;
      case HDLPackage.PT_ARCH_DECL__SIGNAL_ASSIGN:
        getSignalAssign().clear();
        getSignalAssign().addAll((Collection<? extends PTSignalAssign>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HDLPackage.PT_ARCH_DECL__ENTITY_ID:
        setEntityId((PTEntityDecl)null);
        return;
      case HDLPackage.PT_ARCH_DECL__SIGNAL_DECLS:
        getSignalDecls().clear();
        return;
      case HDLPackage.PT_ARCH_DECL__SIGNAL_ASSIGN:
        getSignalAssign().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HDLPackage.PT_ARCH_DECL__ENTITY_ID:
        return entityId != null;
      case HDLPackage.PT_ARCH_DECL__SIGNAL_DECLS:
        return signalDecls != null && !signalDecls.isEmpty();
      case HDLPackage.PT_ARCH_DECL__SIGNAL_ASSIGN:
        return signalAssign != null && !signalAssign.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //PTArchDeclImpl
