/*
 * generated by Xtext 2.35.0
 */
parser grammar InternalHDLParser;

options {
	tokenVocab=InternalHDLLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.xtext.example.hdl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.hdl.services.HDLGrammarAccess;

}

@members {

 	private HDLGrammarAccess grammarAccess;

    public InternalHDLParser(TokenStream input, HDLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected HDLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getEntityDeclEntity_declParserRuleCall_0_0());
				}
				lv_entityDecl_0_0=ruleentity_decl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"entityDecl",
						lv_entityDecl_0_0,
						"org.xtext.example.hdl.HDL.entity_decl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getArchDeclArch_declParserRuleCall_1_0());
				}
				lv_archDecl_1_0=rulearch_decl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"archDecl",
						lv_archDecl_1_0,
						"org.xtext.example.hdl.HDL.arch_decl");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleentity_decl
entryRuleentity_decl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntity_declRule()); }
	iv_ruleentity_decl=ruleentity_decl
	{ $current=$iv_ruleentity_decl.current; }
	EOF;

// Rule entity_decl
ruleentity_decl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Entity
		{
			newLeafNode(otherlv_0, grammarAccess.getEntity_declAccess().getEntityKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEntity_declAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntity_declRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=Is
		{
			newLeafNode(otherlv_2, grammarAccess.getEntity_declAccess().getIsKeyword_2());
		}
		otherlv_3=End
		{
			newLeafNode(otherlv_3, grammarAccess.getEntity_declAccess().getEndKeyword_3());
		}
		otherlv_4=Semicolon
		{
			newLeafNode(otherlv_4, grammarAccess.getEntity_declAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRulearch_decl
entryRulearch_decl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArch_declRule()); }
	iv_rulearch_decl=rulearch_decl
	{ $current=$iv_rulearch_decl.current; }
	EOF;

// Rule arch_decl
rulearch_decl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Architecture
		{
			newLeafNode(otherlv_0, grammarAccess.getArch_declAccess().getArchitectureKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			newLeafNode(this_ID_1, grammarAccess.getArch_declAccess().getIDTerminalRuleCall_1());
		}
		otherlv_2=Of
		{
			newLeafNode(otherlv_2, grammarAccess.getArch_declAccess().getOfKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArch_declRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getArch_declAccess().getEntityIdPTEntityDeclCrossReference_3_0());
				}
			)
		)
		otherlv_4=Is
		{
			newLeafNode(otherlv_4, grammarAccess.getArch_declAccess().getIsKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArch_declAccess().getSignalDeclsSignal_declParserRuleCall_5_0());
				}
				lv_signalDecls_5_0=rulesignal_decl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArch_declRule());
					}
					add(
						$current,
						"signalDecls",
						lv_signalDecls_5_0,
						"org.xtext.example.hdl.HDL.signal_decl");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6=Begin
		{
			newLeafNode(otherlv_6, grammarAccess.getArch_declAccess().getBeginKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArch_declAccess().getSignalAssignSignal_assignParserRuleCall_7_0());
				}
				lv_signalAssign_7_0=rulesignal_assign
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArch_declRule());
					}
					add(
						$current,
						"signalAssign",
						lv_signalAssign_7_0,
						"org.xtext.example.hdl.HDL.signal_assign");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8=End
		{
			newLeafNode(otherlv_8, grammarAccess.getArch_declAccess().getEndKeyword_8());
		}
		otherlv_9=Semicolon
		{
			newLeafNode(otherlv_9, grammarAccess.getArch_declAccess().getSemicolonKeyword_9());
		}
	)
;

// Entry rule entryRulesignal_decl
entryRulesignal_decl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignal_declRule()); }
	iv_rulesignal_decl=rulesignal_decl
	{ $current=$iv_rulesignal_decl.current; }
	EOF;

// Rule signal_decl
rulesignal_decl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=SIGNAL
		{
			newLeafNode(otherlv_0, grammarAccess.getSignal_declAccess().getSIGNALKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSignal_declAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignal_declRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=Colon
		{
			newLeafNode(otherlv_2, grammarAccess.getSignal_declAccess().getColonKeyword_2());
		}
		(
			(
				lv_signalType_3_0=RULE_ID
				{
					newLeafNode(lv_signalType_3_0, grammarAccess.getSignal_declAccess().getSignalTypeIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignal_declRule());
					}
					setWithLastConsumed(
						$current,
						"signalType",
						lv_signalType_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4=Semicolon
		{
			newLeafNode(otherlv_4, grammarAccess.getSignal_declAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRulesignal_assign
entryRulesignal_assign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignal_assignRule()); }
	iv_rulesignal_assign=rulesignal_assign
	{ $current=$iv_rulesignal_assign.current; }
	EOF;

// Rule signal_assign
rulesignal_assign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSignal_assignAccess().getLhsLhsParserRuleCall_0_0());
				}
				lv_lhs_0_0=rulelhs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignal_assignRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_0_0,
						"org.xtext.example.hdl.HDL.lhs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=LessThanSignEqualsSign
		{
			newLeafNode(otherlv_1, grammarAccess.getSignal_assignAccess().getLessThanSignEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSignal_assignAccess().getRhsRhsParserRuleCall_2_0());
				}
				lv_rhs_2_0=rulerhs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignal_assignRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_2_0,
						"org.xtext.example.hdl.HDL.rhs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=Semicolon
		{
			newLeafNode(otherlv_3, grammarAccess.getSignal_assignAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulelhs
entryRulelhs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLhsRule()); }
	iv_rulelhs=rulelhs
	{ $current=$iv_rulelhs.current; }
	EOF;

// Rule lhs
rulelhs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLhsRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getLhsAccess().getIdPTSignalDeclCrossReference_0());
			}
		)
	)
;

// Entry rule entryRulerhs
entryRulerhs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRhsRule()); }
	iv_rulerhs=rulerhs
	{ $current=$iv_rulerhs.current; }
	EOF;

// Rule rhs
rulerhs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRhsRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getRhsAccess().getIdPTSignalDeclCrossReference_0());
			}
		)
	)
;
