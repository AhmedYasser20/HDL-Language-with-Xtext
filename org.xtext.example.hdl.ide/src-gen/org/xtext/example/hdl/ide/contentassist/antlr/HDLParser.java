/*
 * generated by Xtext 2.35.0
 */
package org.xtext.example.hdl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.hdl.ide.contentassist.antlr.internal.InternalHDLParser;
import org.xtext.example.hdl.services.HDLGrammarAccess;

public class HDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(HDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, HDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getEntity_declAccess().getGroup(), "rule__Entity_decl__Group__0");
			builder.put(grammarAccess.getArch_declAccess().getGroup(), "rule__Arch_decl__Group__0");
			builder.put(grammarAccess.getSignal_declAccess().getGroup(), "rule__Signal_decl__Group__0");
			builder.put(grammarAccess.getSignal_assignAccess().getGroup(), "rule__Signal_assign__Group__0");
			builder.put(grammarAccess.getModelAccess().getEntityDeclAssignment_0(), "rule__Model__EntityDeclAssignment_0");
			builder.put(grammarAccess.getModelAccess().getArchDeclAssignment_1(), "rule__Model__ArchDeclAssignment_1");
			builder.put(grammarAccess.getEntity_declAccess().getNameAssignment_1(), "rule__Entity_decl__NameAssignment_1");
			builder.put(grammarAccess.getArch_declAccess().getEntityIdAssignment_3(), "rule__Arch_decl__EntityIdAssignment_3");
			builder.put(grammarAccess.getArch_declAccess().getSignalDeclsAssignment_5(), "rule__Arch_decl__SignalDeclsAssignment_5");
			builder.put(grammarAccess.getArch_declAccess().getSignalAssignAssignment_7(), "rule__Arch_decl__SignalAssignAssignment_7");
			builder.put(grammarAccess.getSignal_declAccess().getNameAssignment_1(), "rule__Signal_decl__NameAssignment_1");
			builder.put(grammarAccess.getSignal_declAccess().getSignalTypeAssignment_3(), "rule__Signal_decl__SignalTypeAssignment_3");
			builder.put(grammarAccess.getSignal_assignAccess().getLhsAssignment_0(), "rule__Signal_assign__LhsAssignment_0");
			builder.put(grammarAccess.getSignal_assignAccess().getRhsAssignment_2(), "rule__Signal_assign__RhsAssignment_2");
			builder.put(grammarAccess.getLhsAccess().getIdAssignment(), "rule__Lhs__IdAssignment");
			builder.put(grammarAccess.getRhsAccess().getIdAssignment(), "rule__Rhs__IdAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private HDLGrammarAccess grammarAccess;

	@Override
	protected InternalHDLParser createParser() {
		InternalHDLParser result = new InternalHDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
